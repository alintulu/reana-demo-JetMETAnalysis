stages:
  - name: get_conditions
    dependencies: [init]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        sample_id: {step: 'init', output: sample_id}
        pileup: '{workdir}/pileup'
        conditions: '{workdir}/conditions'
        cmssw_release: '{workdir}/cmssw_release'
      step: {$ref: workflow/steps.yaml#/get_conditions}

  - name: setup_code
    dependencies: [get_conditions]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        work_dir: '{workdir}'
        release: {stages: 'get_conditions', output: cmssw_release}
        scram_arch: {step: 'init', output: scram_arch}
      step: {$ref: workflow/steps.yaml#/setup_code}

  - name: create_PU_dist
    dependencies: [setup_code]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        mix_conf_mc: {stages: 'get_conditions', output: conditions} 
        PU_dist_data: {step: 'init', output: PU_dist_data}
        PU_dist_mc: '{workdir}/MyMCPileupDistribution.root'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: workflow/steps.yaml#/create_PU_dist}

  - name: produce_ntuple
    dependencies: [create_PU_dist]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file_PU: {step: 'init', output: PU_files, unwrap: true}
        input_file_noPU: {step: 'init', output: noPU_files, unwrap: true}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        work_dir: {stages: 'setup_code', output: code_path}
      workflow: {$ref: workflow/workflow_ntuple.yaml}

  - name: match_lumi
    dependencies: [produce_ntuple]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        lumi_file_PU: {stages: 'produce_ntuple[*].list_lumi_PU', output: lumi_file}
        lumi_file_noPU: {stages: 'produce_ntuple[*].list_lumi_noPU', output: lumi_file}
        batch_size: {step: 'init', output: batch_size}
        output_file: '{workdir}/Matchedfiles.yml'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: workflow/steps.yaml#/match_lumi}
        
  - name: match_jets
    dependencies: [match_lumi]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        input_file: {stages: 'match_lumi', output: MatchedFiles, unwrap: true}
        PU_dist_mc: {stages: 'create_PU_dist', output: PU_dist_mc}
        PU_dist_data: {stages: 'create_PU_dist', output: PU_dist_data}
        sleep: ["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"]
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        output_path: '{workdir}'
        output_file: '{workdir}/Matchedjets.root'
        work_dir: {stages: 'setup_code', output: code_path}
      scatter:
        method: zip
        parameters: [input_file, sleep]
      step: {$ref: workflow/steps.yaml#/match_jets}

  - name: compute_l1
    dependencies: [match_jets]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'match_jets', output: matched_file}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        era: {step: 'init', output: era}
        output_path: '{workdir}'
        output_file: '{workdir}/L1FastJet.txt'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: workflow/steps.yaml#/compute_l1}

  - name: higher_level
    dependencies: [compute_l1]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        input_file: {step: 'init', output: PU_files, unwrap: true}
        PU_dist_mc: {stages: 'create_PU_dist', output: PU_dist_mc}
        PU_dist_data: {stages: 'create_PU_dist', output: PU_dist_data}
        l1_corr: {stages: 'compute_l1', output: l1_corr}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        era: {step: 'init', output: era}
        work_dir: {stages: 'setup_code', output: code_path}
      batchsize: 10
      scatter:
        method: zip
        parameters: [input_file]
      workflow: {$ref: workflow/workflow_higher_level.yaml}

  - name: compute_l2l3
    dependencies: [higher_level]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'higher_level.[*].histogram', output: histo}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        era: {step: 'init', output: era}
        output_path: '{workdir}'
        output_file: '{workdir}/L2Relative.txt'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: 'workflow/steps.yaml#/compute_l2l3'}

  - name: closure
    dependencies: [compute_l2l3]
    scheduler:
      scheduler_type: multistep-stage
      parameters:
        l1_corr: {stages: 'compute_l1', output: l1_corr}
        l2l3_corr: {stages: 'compute_l2l3', output: l2l3_corr}
        input_file: {stages: 'higher_level[*].apply_l1', output: merged}
        PU_dist_mc: {stages: 'create_PU_dist', output: PU_dist_mc}
        PU_dist_data: {stages: 'create_PU_dist', output: PU_dist_data}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        era: {step: 'init', output: era}
        output_path: '{workdir}'
        output_file: '{workdir}/Closure.root'
        work_dir: {stages: 'setup_code', output: code_path}
      scatter:
        method: zip
        parameters: [input_file]
      step: {$ref: 'workflow/steps.yaml#/closure'}

  - name: plots_closure
    dependencies: [closure]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        input_file: {stages: 'closure', output: closure}
        output_path_eos: '/eos/user/a/adlintul/reana/plot_closure/17062020_full_k8s/'
        output_path: '{workdir}/'
        output_file: '{workdir}/Closure_ak8pfchs.root'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: 'workflow/steps.yaml#/plot_closure'}

  - name: plot_comparison
    dependencies: [compute_l2l3]
    scheduler:
      scheduler_type: singlestep-stage
      parameters:
        l1_corr: {stages: 'compute_l1', output: l1_corr}
        l2l3_corr: {stages: 'compute_l2l3', output: l2l3_corr}
        algo: {step: 'init', output: algo}
        cone_size: {step: 'init', output: cone_size}
        jet_type: {step: 'init', output: jet_type}
        era: {step: 'init', output: era}
        versions: 'Summer19UL18_V2_MC'
        levels: 'L1FastJet L2Relative'
        fix_pt: '30 100 300'
        fix_rho: '20 40 60'
        fix_eta: '0 1.5 2.3 3.0'
        dependent: 'all'
        output_path: '{workdir}/'
        output_file: '{workdir}/Closure_ak8pfchs.root'
        work_dir: {stages: 'setup_code', output: code_path}
      step: {$ref: 'workflow/steps.yaml#/plot_comparison'}