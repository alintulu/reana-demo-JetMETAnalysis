get_conditions:
  process:
    process_type: interpolated-script-cmd
    interpreter: sh
    script: | 
      curl_command="curl https://cms-pdmv.cern.ch/mcm/public/restapi/requests/get/{sample_id} -k --silent"
      eval $curl_command | jq ".results.sequences[].pileup" | sed s/'"'/''/g > {pileup}
      eval $curl_command | jq ".results.sequences[].conditions" | sed s/'"'/''/g > {conditions}
      eval $curl_command | jq ".results.cmssw_release" | sed s/'"'/''/g > {cmssw_release}
      echo -n "Pileup: "
      cat {pileup}
      echo -n "Conditions: "
      cat {conditions}
      echo -n "CMSSW release: "
      cat {cmssw_release}
  environment:
    environment_type: docker-encapsulated
    image: peterevans/curl-jq
  publisher:
    publisher_type: interpolated-pub
    publish:
      pileup: '{pileup}'
      conditions: '{conditions}'
      cmssw_release: '{cmssw_release}'

setup_code:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      echo "Setting up $(cat {release})"
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd {work_dir}
      export SCRAM_ARCH={scram_arch}
      scramv1 project CMSSW $(cat {release})
      cd {work_dir}/$(cat {release})/src
      eval `scramv1 runtime -sh`

      echo "Compiling JetMETAnalysis code..."
      cp -r $REANA_WORKSPACE/code/JetMETAnalysis .
      scram b -j 8

      echo "Compiling helper scripts..."
      cp $REANA_WORKSPACE/code/utils/* .
      make all

      echo "Compiling comparison plot scripts..."
      cp $REANA_WORKSPACE/code/comparisonPlots/* .
      make all

      echo "Done with compilation."
      echo {work_dir}/$(cat {release})/src > {work_dir}/code_path
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      code_path: '{work_dir}/code_path'
      
create_PU_dist:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      python makeMCPileupHist.py SimGeneral.MixingModule.mix_{mix_conf_mc}_cfi --outputFilename {PU_dist_mc}
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      PU_dist_mc: '{PU_dist_mc}'
      PU_dist_data: '{PU_dist_data}'

list_lumi:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      files="{input_file}"

      for file in {input_file}; do
        n=0
        until [ "$n" -ge 5 ]; do
          ls $file
          root -q -b $file
          if [ $? -eq 255 ]; then
            break
          fi
          n=$(($n+1)) 
          sleep 10
        done

        if [ "$n" == 5 ]; then
          echo "!!!!!!! $file corrupted! Removing it from the list. !!!!!!!"
          echo -n "$files ==> "
          files=$(echo $files | sed s@"$file"@@)
          echo $files
        fi
      done
      
      for i in $files; do
        ./RunListRunLumi $i $algorithm >> {output_file};
      done
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
    resources:
      - kerberos: true
  publisher:
    publisher_type: interpolated-pub
    publish:
      lumi_file: '{output_file}'

match_lumi:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      cat {lumi_file_noPU} {lumi_file_PU} | ./RunMatchFiles > MatchedFiles
      echo 'MatchedFiles:' > {output_file}
      ./RunPrepareMatching MatchedFiles {batch_size} >> {output_file}
  publisher:
    publisher_type: fromyaml-pub
    yamlfile: 'Matchedfiles.yml'
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms

match_jets:
  process:
    process_type: interpolated-script-cmd
    interpreter: bash
    script: | 
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      echo I will sleep for $(({sleep}*15)) minutes
      echo Time when sleep started $(date +"%T")

      sleep $(({sleep}*15))m

      echo Time when sleep is over $(date +"%T")
      echo Starting to hadd..

      read -r NoPUFile PUFile <<<$(echo {input_file})

      NoPUFile=$(echo $NoPUFile | tr ':' ' ')
      PUFile=$(echo $PUFile | tr ':' ' ')

      echo "!!!!!!!"
      echo $PUFile
      echo "!!!!!!!"

      nopu_files="$NoPUFile"
      pu_files="$PUFile"

      hadd -f -k -n 5 {output_path}/NoPUFile.root $nopu_files
      hadd -f -k -n 5 {output_path}/PUFile.root $pu_files

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      jet_match_x \
        -basepath '//' \
        -samplePU {output_path}/PUFile.root \
        -sampleNoPU {output_path}/NoPUFile.root \
        -algo1 $algorithm \
        -algo2 $algorithm \
        -iftest false \
        -maxEvts 10000000 \
        -ApplyJEC false \
        -outputPath {output_path} \
        -npvRhoNpuBinWidth 10 \
        -NBinsNpvRhoNpu 6 \
        -MCPUReWeighting {PU_dist_mc} \
        -MCPUHistoName pileup \
        -DataPUReWeighting {PU_dist_data} \
        -useweight true \
        -nrefmax 3 \
        -doNotSave true

      mv {output_path}/output_*.root {output_path}/Matchedjets.root

      rm {output_path}/NoPUFile.root
      rm {output_path}/PUFile.root
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
    resources:
      - kerberos: true
  publisher:
    publisher_type: interpolated-pub
    publish:
      matched_file: '{output_file}'

compute_l1:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: | 
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')
      merge=output_$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]').root

      hadd -k -f -n 5 {output_path}/$merge {input_file}

      jet_synchfit_x \
        -inputDir {output_path} \
        -outputDir {output_path} \
        -algo1 $algorithm \
        -algo2 $algorithm \
        -highPU false \
        -useNPU false \
        -functionType standard \
        -era {era}PreDeriveL1

      root -b -q -l `printf "deriveL1.C+(\"{output_path}\",\"$algorithm\",\"{algo}{cone_size}{jet_type}\",\"{era}\")"`
      mv *.txt {output_path}
      rm {output_path}/*.root
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      l1_corr: '{output_file}'

apply_l1:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`
      cp {l1_corr} {era}_L1FastJet_{algo}{cone_size}{jet_type}.txt

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      hadd -k -f -n 5 {output_merged} {input_file}

      jet_apply_jec_x \
        -input {output_merged} \
        -output {output_file} \
        -jecpath $PWD \
        -era {era} \
        -levels 1 \
        -algs $algorithm \
        -L1FastJet true \
        -saveitree false
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
    resources:
      - kerberos: true
  publisher:
    publisher_type: interpolated-pub
    publish:
      applied_l1: '{output_file}'
      merged: '{output_merged}'

histogram:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')l1:0.2

      jet_response_analyzer_x JetMETAnalysis/JetAnalyzers/config/jra_dr_finebinning.config \
        -input {input_file} \
        -nbinsabsrsp 0 \
        -nbinsetarsp 0 \
        -nbinsphirsp 0 \
        -nbinsrelrsp 200 \
        -doflavor false \
        -flavorDefinition phys \
        -MCPUReWeighting {PU_dist_mc} \
        -MCPUHistoName pileup \
        -DataPUReWeighting {PU_dist_data} \
        -DataPUHistoName pileup \
        -output {output_file} \
        -useweight true \
        -nrefmax 3 \
        -algs $algorithm \
        -relrspmin 0.0 \
        -relrspmax 2.0
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      histo: '{output_file}'

compute_l2l3:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      hadd -k -f -n 5 {output_path}/Merged.root {input_file}

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')l1

      jet_l2_correction_x \
        -input {output_path}/Merged.root \
        -algs $algorithm \
        -era {era} \
        -output l2.root \
        -outputDir {output_path}/ \
        -makeCanvasVariable AbsCorVsJetPt:JetEta \
        -l2l3 true \
        -batch true \
        -histMet median \
        -delphes false \
        -maxFitIter 30 \
        -l2calofit DynamicMin \
        -l2pffit splineAkima \
        -ptclip 20

      cp {output_path}/{era}*.txt {output_path}/L2Relative.txt
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      l2l3_corr: '{output_file}'

closure:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`
      cp {l1_corr} {era}_L1FastJet_{algo}{cone_size}{jet_type}.txt
      cp {l2l3_corr} {era}_L2Relative_{algo}{cone_size}{jet_type}.txt

      algorithm=$(echo {algo}{cone_size}{jet_type} | tr '[:upper:]' '[:lower:]')

      inputFileNamePath=$(echo {input_file} | rev | cut -d"/" -f2-  | rev)
      inputFileName=$(echo {input_file} | rev | cut -d"/" -f1  | rev | cut -d"." -f1)

      jet_correction_analyzer_x \
        -inputFilename $inputFileName \
        -inputFilePath $inputFileNamePath \
        -outputDir {output_path}/ \
        -path $PWD \
        -era {era} \
        -levels 1 2 \
        -useweight true \
        -algs $algorithm \
        -drmax 0.2 \
        -evtmax 0 \
        -nbinsrelrsp 200 \
        -relrspmin 0.0 \
        -relrspmax 2.0 \
        -MCPUReWeighting {PU_dist_mc} \
        -DataPUReWeighting {PU_dist_data} \
        -nrefmax 3

      rm {input_file}
      mv {output_path}/Closure_*.root {output_path}/Closure.root
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
    resources:
      - kerberos: true
  publisher:
    publisher_type: interpolated-pub
    publish:
      closure: '{output_file}'

plot_closure:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      mkdir -p {output_path}
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`
      
      hadd -k -f -n 5 {output_path}/Merged.root {input_file}

      jet_draw_closure_x \
        -doPt true \
        -doEta true \
        -path {output_path} \
        -filename Merged \
        -basepath {output_path} \
        -histMet median \
        -outputDir {output_path} \
        -draw_guidelines true \
        -doRatioPt false \
        -doRatioEta false
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      closure: '{output_file}'

plot_comparison:
  process:
    process_type: interpolated-script-cmd
    interpreter: zsh
    script: |
      source /cvmfs/cms.cern.ch/cmsset_default.sh
      cd $(cat {work_dir})
      eval `scramv1 runtime -sh`

      mkdir -p JECDatabase/{era}
      cp {l1_corr} JECDatabase/{era}/{era}_L1FastJet_{algo}{cone_size}{jet_type}.txt
      cp {l2l3_corr} JECDatabase/{era}/{era}_L2Relative_{algo}{cone_size}{jet_type}.txt

      rawPath=https://raw.githubusercontent.com/cms-jet/JECDatabase/master/textFiles

      echo "INFO | Downloading corrections from Github.."
      for version in {era} {versions}; do
          mkdir -p JECDatabase/$version
          for level in {levels}; do
              if  wget -q -N $rawPath/$version/$version\_$level\_{algo}.txt -P JECDatabase/$version; then
          echo "INFO |" Downloading $rawPath/$version/$version\_$level\_{algo}.txt into JECDatabase/$version
        else
          if [ -f JECDatabase/$version/$version\_$level\_{algo}.txt ]; then
              echo "INFO |" $version\_$level\_{algo}.txt already exist in JECDatabase/$version
          else
              echo "WARNING |" $version\_$level\_{algo}.txt does not exist in JECDatabase/$version
              echo "WARNING | Aborting.."
              return
          fi 
        fi
          done
      done

      echo

      versions=$(echo "{era} {versions}" | sed -e 's/\s\+/,/g')

      if [[ {dependent} == *"all"* ]] || [[ {dependent} == *"Eta"* ]]; then
        echo "INFO | Computing Eta dependent comparisons.."
        for pt in {fix_pt}; do
            echo "    PT" $pt
            for rho in {fix_rho}; do  
                echo "      Rho" $rho
                for level in {levels}; do
                  echo "         Level" $level
                  ./Execute --Version $versions --Algorithm {algo} --Level $level --Dependent Eta --Min -4.18 --Max 5.18 --NBin -1 --FixPT $pt --FixRho $rho >> EtaDependent.txt 
                done
                python PlotCompareVersions.py --Dependent Eta --Levels {levels} --Versions {era} {versions} --OutputPath {output_path} --Algorithm {algo}
                rm EtaDependent.txt
            done
        done

      fi

      if [[ {dependent} == *"all"* ]] || [[ {dependent} == *"PT"* ]]; then
        echo "INFO | Computing PT dependent comparisons.."
        for eta in {fix_eta}; do
            echo "    Eta" $eta
            for rho in {fix_rho}; do
              echo "      Rho" $rho
              for level in {levels}; do
                  echo "         Level" $level
                  ./Execute --Version $versions --Algorithm {algo} --Level $level --Dependent PT --Min 1 --Max 7000 --NBin 100 --FixEta $eta --FixRho $rho >> PTDependent.txt
              done
              python PlotCompareVersions.py --Dependent PT --Levels {levels} --Versions {era} {versions} --OutputPath {output_path} --Algorithm {algo}
              rm PTDependent.txt
            done
        done
      fi

      if [[ {dependent} == *"all"* ]] || [[ {dependent} == *"Rho"* ]]; then
        echo "INFO | Computing Rho dependent comparisons.."
        for eta in {fix_eta}; do
            echo "    Eta" $eta
            for pt in {fix_pt}; do
              echo "      PT" $pt
              for level in {levels}; do
                  echo "         Level" $level
                  ./Execute --Version $versions --Algorithm {algo} --Level $level --Dependent Rho --Min 0 --Max 70 --NBin 50 --FixPT $pt --FixEta $eta >> RhoDependent.txt
              done
              python PlotCompareVersions.py --Dependent Rho --Levels {levels} --Versions {era} {versions} --OutputPath {output_path} --Algorithm {algo}
              rm RhoDependent.txt
            done
        done
      fi
  environment:
    environment_type: docker-encapsulated
    image: clelange/cc7-cms
  publisher:
    publisher_type: interpolated-pub
    publish:
      comparison: '{output_file}'
